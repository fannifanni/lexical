"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[7202],{876:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var l=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),d=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return l.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},h=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(a),u=n,m=h["".concat(o,".").concat(u)]||h[u]||p[u]||r;return a?l.createElement(m,i(i({ref:t},c),{},{components:a})):l.createElement(m,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var d=2;d<r;d++)i[d]=a[d];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3654:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var l=a(7896),n=(a(2784),a(876));const r={id:"lexical_hashtag",title:"Module: @lexical/hashtag",sidebar_label:"@lexical/hashtag",sidebar_position:0,custom_edit_url:null},i=void 0,s={unversionedId:"api/modules/lexical_hashtag",id:"api/modules/lexical_hashtag",title:"Module: @lexical/hashtag",description:"Classes",source:"@site/docs/api/modules/lexical_hashtag.md",sourceDirName:"api/modules",slug:"/api/modules/lexical_hashtag",permalink:"/lexical/docs/api/modules/lexical_hashtag",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"lexical_hashtag",title:"Module: @lexical/hashtag",sidebar_label:"@lexical/hashtag",sidebar_position:0,custom_edit_url:null},sidebar:"api",previous:{title:"@lexical/file",permalink:"/lexical/docs/api/modules/lexical_file"},next:{title:"@lexical/headless",permalink:"/lexical/docs/api/modules/lexical_headless"}},o={},d=[{value:"Classes",id:"classes",level:2},{value:"Functions",id:"functions",level:2},{value:"$createHashtagNode",id:"createhashtagnode",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"$isHashtagNode",id:"ishashtagnode",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4}],c={toc:d};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"classes"},"Classes"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/lexical/docs/api/classes/lexical_hashtag.HashtagNode"},"HashtagNode"))),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"createhashtagnode"},"$createHashtagNode"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"$createHashtagNode"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"text?"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical_hashtag.HashtagNode"},(0,n.kt)("inlineCode",{parentName:"a"},"HashtagNode"))),(0,n.kt)("p",null,"Generates a HashtagNode, which is a string following the format of a # followed by some text, eg. #lexical."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"text")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"''")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The text used inside the HashtagNode.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical_hashtag.HashtagNode"},(0,n.kt)("inlineCode",{parentName:"a"},"HashtagNode"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The HashtagNode with the embedded text.")),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-hashtag/src/LexicalHashtagNode.ts#L69"},"lexical-hashtag/src/LexicalHashtagNode.ts:69")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"ishashtagnode"},"$isHashtagNode"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"$isHashtagNode"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"node"),"): node is HashtagNode"),(0,n.kt)("p",null,"Determines if node is a HashtagNode."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"undefined")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,n.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,n.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"The node to be checked.")))),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,"node is HashtagNode"),(0,n.kt)("p",null,"true if node is a HashtagNode, false otherwise."),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-hashtag/src/LexicalHashtagNode.ts#L78"},"lexical-hashtag/src/LexicalHashtagNode.ts:78")))}p.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4490],{876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7237:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7896),r=(n(2784),n(876));const o={},i="Commands",l={unversionedId:"concepts/commands",id:"concepts/commands",title:"Commands",description:"Commands are a very powerful feature of Lexical that lets you register listeners for events like KEYENTERCOMMAND or KEYTABCOMMAND and contextually react to them wherever & however you'd like.",source:"@site/docs/concepts/commands.md",sourceDirName:"concepts",slug:"/concepts/commands",permalink:"/lexical/docs/concepts/commands",draft:!1,editUrl:"https://github.com/fannifanni/lexical/tree/main/packages/lexical-website/docs/concepts/commands.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Node Transforms",permalink:"/lexical/docs/concepts/transforms"},next:{title:"Selection",permalink:"/lexical/docs/concepts/selection"}},c={},s=[{value:"<code>createCommand(...)</code>",id:"createcommand",level:2},{value:"<code>editor.dispatchCommand(...)</code>",id:"editordispatchcommand",level:2},{value:"<code>editor.registerCommand(...)</code>",id:"editorregistercommand",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commands"},"Commands"),(0,r.kt)("p",null,"Commands are a very powerful feature of Lexical that lets you register listeners for events like ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY_ENTER_COMMAND")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY_TAB_COMMAND")," and contextually react to them ",(0,r.kt)("em",{parentName:"p"},"wherever")," & ",(0,r.kt)("em",{parentName:"p"},"however")," you'd like."),(0,r.kt)("p",null,"This pattern is useful for building ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx"},(0,r.kt)("inlineCode",{parentName:"a"},"Toolbars"))," or complex ",(0,r.kt)("inlineCode",{parentName:"p"},"Plugins")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Nodes")," such as the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/tree/main/packages/lexical-table"},(0,r.kt)("inlineCode",{parentName:"a"},"TablePlugin"))," which require special handling for ",(0,r.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keyboard events"),", and more."),(0,r.kt)("p",null,"When registering a ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," you supply a ",(0,r.kt)("inlineCode",{parentName:"p"},"priority")," and can return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to mark it as \"handled\", which stops other listeners from receiving the event. If a command isn't handled explicitly by you, it's likely handled by default in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical-rich-text/src/index.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"RichTextPlugin"))," or the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical-plain-text/src/index.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"PlainTextPlugin")),"."),(0,r.kt)("h2",{id:"createcommand"},(0,r.kt)("inlineCode",{parentName:"h2"},"createCommand(...)")),(0,r.kt)("p",null,"You can view all of the existing commands in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalCommands.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"LexicalCommands.ts")),", but if you need a custom command for your own use case check out the typed ",(0,r.kt)("inlineCode",{parentName:"p"},"createCommand(...)")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const HELLO_WORLD_COMMAND: LexicalCommand<string> = createCommand();\n\neditor.dispatchCommand(HELLO_WORLD_COMMAND, 'Hello World!');\n\neditor.registerCommand(\n  HELLO_WORLD_COMMAND,\n  (payload: string) => {\n    console.log(payload); // Hello World!\n    return false;\n  },\n  LowPriority,\n);\n")),(0,r.kt)("h2",{id:"editordispatchcommand"},(0,r.kt)("inlineCode",{parentName:"h2"},"editor.dispatchCommand(...)")),(0,r.kt)("p",null,"Commands can be dispatched from anywhere you have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"editor")," such as a Toolbar Button, an event listener, or a Plugin, but most of the core commands are dispatched from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"LexicalEvents.ts")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"editor.dispatchCommand(command, payload);\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),"s are typed via the ",(0,r.kt)("inlineCode",{parentName:"p"},"createCommand(...)")," API, but they're usually a DOM ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," for commands dispatched from an event listener."),(0,r.kt)("p",null,"Here are some real examples from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical/src/LexicalEvents.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"LexicalEvents.ts")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"editor.dispatchCommand(KEY_ARROW_LEFT_COMMAND, event);\n// ...\neditor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic');\n")),(0,r.kt)("p",null,"And another example from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/main/packages/lexical-playground/src/plugins/ToolbarPlugin/index.tsx"},(0,r.kt)("inlineCode",{parentName:"a"},"ToolbarPlugin"))," in our Playground."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const formatBulletList = () => {\n  editor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND);\n};\n")),(0,r.kt)("p",null,"Which is later handled in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/1f62ace08e15d55515f3750840133efecd6d7d01/packages/lexical-react/src/shared/useList.js#L65"},(0,r.kt)("inlineCode",{parentName:"a"},"useList"))," to insert the list into the editor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"editor.registerCommand(\n  INSERT_UNORDERED_LIST_COMMAND,\n  () => {\n    insertList(editor, 'ul');\n    return true;\n  },\n  COMMAND_PRIORITY_LOW,\n);\n")),(0,r.kt)("h2",{id:"editorregistercommand"},(0,r.kt)("inlineCode",{parentName:"h2"},"editor.registerCommand(...)")),(0,r.kt)("p",null,"You can register a command from anywhere you have access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"editor")," object, but it's important that you remember to clean up the listener with its remove listener callback when it's no longer needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const removeListener = editor.registerCommand(\n  COMMAND,\n  (payload) => boolean, // Return true to stop propagation.\n  priority,\n);\n// ...\nremoveListener(); // Cleans up the listener.\n")),(0,r.kt)("p",null,"A common pattern for easy clean-up is returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"registerCommand")," call within a React ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"useEffect(() => {\n  return editor.registerCommand(\n    TOGGLE_LINK_COMMAND,\n    (payload) => {\n      const url: string | null = payload;\n      setLink(url);\n      return true;\n    },\n    COMMAND_PRIORITY_EDITOR,\n  );\n}, [editor]);\n")),(0,r.kt)("p",null,"And as seen above and below, ",(0,r.kt)("inlineCode",{parentName:"p"},"registerCommand"),"'s callback can return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to signal to the other listeners that the command has been handled and propagation will be stopped."),(0,r.kt)("p",null,"Here's a simplified example of handling a ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY_TAB_COMMAND")," from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/76b28f4e2b70f1194cc8148dcc30c9f9ec61f811/packages/lexical-rich-text/src/index.js#L625"},(0,r.kt)("inlineCode",{parentName:"a"},"RichTextPlugin")),", which is used to dispatch a ",(0,r.kt)("inlineCode",{parentName:"p"},"OUTDENT_CONTENT_COMMAND")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"INDENT_CONTENT_COMMAND"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"editor.registerCommand(\n  KEY_TAB_COMMAND,\n  (payload) => {\n    const event: KeyboardEvent = payload;\n    event.preventDefault();\n    return editor.dispatchCommand(\n      event.shiftKey ? OUTDENT_CONTENT_COMMAND : INDENT_CONTENT_COMMAND,\n    );\n  },\n  COMMAND_PRIORITY_EDITOR,\n);\n")),(0,r.kt)("p",null,"Note that the same ",(0,r.kt)("inlineCode",{parentName:"p"},"KEY_TAB_COMMAND")," command is registered by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/facebook/lexical/blob/1f62ace08e15d55515f3750840133efecd6d7d01/packages/lexical-table/src/LexicalTableSelectionHelpers.js#L733"},(0,r.kt)("inlineCode",{parentName:"a"},"LexicalTableSelectionHelpers.js")),", which handles moving focus to the next or previous cell within a ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),", but the priority is the highest it can be (",(0,r.kt)("inlineCode",{parentName:"p"},"4"),") because this behavior is very important."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4791],{876:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var l=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),s=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return l.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),k=s(a),m=n,N=k["".concat(o,".").concat(m)]||k[m]||c[m]||i;return a?l.createElement(N,r(r({ref:t},p),{},{components:a})):l.createElement(N,r({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:n,r[1]=d;for(var s=2;s<i;s++)r[s]=a[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},6996:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var l=a(7896),n=(a(2784),a(876));const i={id:"lexical.TabNode",title:"Class: TabNode",sidebar_label:"TabNode",custom_edit_url:null},r=void 0,d={unversionedId:"api/classes/lexical.TabNode",id:"api/classes/lexical.TabNode",title:"Class: TabNode",description:"lexical.TabNode",source:"@site/docs/api/classes/lexical.TabNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.TabNode",permalink:"/lexical/docs/api/classes/lexical.TabNode",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.TabNode",title:"Class: TabNode",sidebar_label:"TabNode",custom_edit_url:null},sidebar:"api",previous:{title:"RootNode",permalink:"/lexical/docs/api/classes/lexical.RootNode"},next:{title:"TextNode",permalink:"/lexical/docs/api/classes/lexical.TextNode"}},o={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"canInsertTextAfter",id:"caninserttextafter",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"canInsertTextBefore",id:"caninserttextbefore",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"setDetail",id:"setdetail",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"setMode",id:"setmode",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"setTextContent",id:"settextcontent",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"Defined in",id:"defined-in-10",level:4}],p={toc:s};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical"},"lexical"),".TabNode"),(0,n.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,n.kt)("p",{parentName:"li"},"\u21b3 ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("inlineCode",{parentName:"strong"},"TabNode"))))),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"new TabNode"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"key?"),")"),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"key?")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string"))))),(0,n.kt)("h4",{id:"overrides"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#constructor"},"constructor")),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L40"},"lexical/src/nodes/LexicalTabNode.ts:40")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"caninserttextafter"},"canInsertTextAfter"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"canInsertTextAfter"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\nwhen a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\nto insert text into this node. If false, it will insert the text in a new sibling node."),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"true if text can be inserted after the node, false otherwise."),(0,n.kt)("h4",{id:"overrides-1"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#caninserttextafter"},"canInsertTextAfter")),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L80"},"lexical/src/nodes/LexicalTabNode.ts:80")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"caninserttextbefore"},"canInsertTextBefore"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"canInsertTextBefore"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\nwhen a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\nto insert text into this node. If false, it will insert the text in a new sibling node."),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,"true if text can be inserted before the node, false otherwise."),(0,n.kt)("h4",{id:"overrides-2"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#caninserttextbefore"},"canInsertTextBefore")),(0,n.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L76"},"lexical/src/nodes/LexicalTabNode.ts:76")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"exportjson"},"exportJSON"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"exportJSON"),"(): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,n.kt)("inlineCode",{parentName:"a"},"SerializedTextNode"))),(0,n.kt)("p",null,"Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,n.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,n.kt)("h4",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,n.kt)("inlineCode",{parentName:"a"},"SerializedTextNode"))),(0,n.kt)("h4",{id:"overrides-3"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#exportjson"},"exportJSON")),(0,n.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L56"},"lexical/src/nodes/LexicalTabNode.ts:56")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"setdetail"},"setDetail"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"setDetail"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"_detail"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\nversion of the argument can only specify one detail value and doing so will remove all other detail values that\nmay be applied to the node. For toggling behavior, consider using ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#toggledirectionless"},"toggleDirectionless"),"\nor TextNode.togglerUnmergeable"),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"_detail")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},"TextDetailType")),(0,n.kt)("td",{parentName:"tr",align:"left"},"TextDetailType or 32-bit integer representing the node detail.")))),(0,n.kt)("h4",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"this TextNode.\n// TODO 0.12 This should just be a ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,n.kt)("h4",{id:"overrides-4"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#setdetail"},"setDetail")),(0,n.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L68"},"lexical/src/nodes/LexicalTabNode.ts:68")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"setmode"},"setMode"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"setMode"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"_type"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"Sets the mode of the node."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"_type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textmodetype"},(0,n.kt)("inlineCode",{parentName:"a"},"TextModeType")))))),(0,n.kt)("h4",{id:"returns-4"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"this TextNode."),(0,n.kt)("h4",{id:"overrides-5"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#setmode"},"setMode")),(0,n.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L72"},"lexical/src/nodes/LexicalTabNode.ts:72")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"settextcontent"},"setTextContent"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"setTextContent"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"_text"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"Sets the text content of the node."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"_text")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the string to set as the text value of the node.")))),(0,n.kt)("h4",{id:"returns-5"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"this TextNode."),(0,n.kt)("h4",{id:"overrides-6"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#settextcontent"},"setTextContent")),(0,n.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L64"},"lexical/src/nodes/LexicalTabNode.ts:64")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"clone"},"clone"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,n.kt)("strong",{parentName:"p"},"clone"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode")))))),(0,n.kt)("h4",{id:"returns-6"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("h4",{id:"overrides-7"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#clone"},"clone")),(0,n.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L31"},"lexical/src/nodes/LexicalTabNode.ts:31")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"gettype"},"getType"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,n.kt)("strong",{parentName:"p"},"getType"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"string")),(0,n.kt)("p",null,"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."),(0,n.kt)("h4",{id:"returns-7"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"string")),(0,n.kt)("h4",{id:"overrides-8"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#gettype"},"getType")),(0,n.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L27"},"lexical/src/nodes/LexicalTabNode.ts:27")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"importdom"},"importDOM"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,n.kt)("strong",{parentName:"p"},"importDOM"),"(): ",(0,n.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,n.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,n.kt)("h4",{id:"returns-8"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,n.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,n.kt)("h4",{id:"overrides-9"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#importdom"},"importDOM")),(0,n.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L45"},"lexical/src/nodes/LexicalTabNode.ts:45")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"importjson"},"importJSON"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,n.kt)("strong",{parentName:"p"},"importJSON"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"serializedTabNode"),"): ",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("p",null,"Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,n.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,n.kt)("h4",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"serializedTabNode")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,n.kt)("inlineCode",{parentName:"a"},"SerializedTextNode")))))),(0,n.kt)("h4",{id:"returns-9"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,n.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,n.kt)("h4",{id:"overrides-10"},"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},"TextNode"),".",(0,n.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#importjson"},"importJSON")),(0,n.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/537767a/packages/lexical/src/nodes/LexicalTabNode.ts#L49"},"lexical/src/nodes/LexicalTabNode.ts:49")))}c.isMDXComponent=!0}}]);
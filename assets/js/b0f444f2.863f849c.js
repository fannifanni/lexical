"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4252],{876:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(2784);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),k=p(a),c=r,u=k["".concat(d,".").concat(c)]||k[c]||m[c]||l;return a?n.createElement(u,i(i({ref:t},s),{},{components:a})):n.createElement(u,i({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5039:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7896),r=(a(2784),a(876));const l={id:"lexical_text",title:"Module: @lexical/text",sidebar_label:"@lexical/text",sidebar_position:0,custom_edit_url:null},i=void 0,o={unversionedId:"api/modules/lexical_text",id:"api/modules/lexical_text",title:"Module: @lexical/text",description:"Type Aliases",source:"@site/docs/api/modules/lexical_text.md",sourceDirName:"api/modules",slug:"/api/modules/lexical_text",permalink:"/lexical/docs/api/modules/lexical_text",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"lexical_text",title:"Module: @lexical/text",sidebar_label:"@lexical/text",sidebar_position:0,custom_edit_url:null},sidebar:"api",previous:{title:"@lexical/table",permalink:"/lexical/docs/api/modules/lexical_table"},next:{title:"@lexical/utils",permalink:"/lexical/docs/api/modules/lexical_utils"}},d={},p=[{value:"Type Aliases",id:"type-aliases",level:2},{value:"EntityMatch",id:"entitymatch",level:3},{value:"Type declaration",id:"type-declaration",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"TextNodeWithOffset",id:"textnodewithoffset",level:3},{value:"Type declaration",id:"type-declaration-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"Functions",id:"functions",level:2},{value:"$canShowPlaceholder",id:"canshowplaceholder",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"$canShowPlaceholderCurry",id:"canshowplaceholdercurry",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Returns",id:"returns-2",level:5},{value:"Defined in",id:"defined-in-3",level:4},{value:"$findTextIntersectionFromCharacters",id:"findtextintersectionfromcharacters",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"$isRootTextContentEmpty",id:"isroottextcontentempty",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"$isRootTextContentEmptyCurry",id:"isroottextcontentemptycurry",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Returns",id:"returns-6",level:5},{value:"Defined in",id:"defined-in-6",level:4},{value:"$rootTextContent",id:"roottextcontent",level:3},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"registerLexicalTextEntity",id:"registerlexicaltextentity",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4}],s={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"type-aliases"},"Type Aliases"),(0,r.kt)("h3",{id:"entitymatch"},"EntityMatch"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"EntityMatch"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"end")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"start")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L187"},"lexical-text/src/index.ts:187")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"textnodewithoffset"},"TextNodeWithOffset"),(0,r.kt)("p",null,"\u01ac ",(0,r.kt)("strong",{parentName:"p"},"TextNodeWithOffset"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("h4",{id:"type-declaration-1"},"Type declaration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"node")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,r.kt)("inlineCode",{parentName:"a"},"TextNode")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L22"},"lexical-text/src/index.ts:22")),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"canshowplaceholder"},"$canShowPlaceholder"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$canShowPlaceholder"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"isComposing"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Determines if the input should show the placeholder. If anything is in\nin the root the placeholder should not be shown."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isComposing")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Is the editor in composition mode due to an active Input Method Editor?")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"true if the input should show the placeholder, false otherwise."),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L131"},"lexical-text/src/index.ts:131")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"canshowplaceholdercurry"},"$canShowPlaceholderCurry"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$canShowPlaceholderCurry"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"isEditorComposing"),"): () => ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Returns a function that executes ",(0,r.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_text#$canshowplaceholder"},"$canShowPlaceholder")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isEditorComposing")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Is the editor in composition mode due to an active Input Method Editor?")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"A function that executes $canShowPlaceholder with arguments."),(0,r.kt)("p",null,"\u25b8 (): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L181"},"lexical-text/src/index.ts:181")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"findtextintersectionfromcharacters"},"$findTextIntersectionFromCharacters"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$findTextIntersectionFromCharacters"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"root"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"targetCharacters"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," ","|"," { ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),": ",(0,r.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,r.kt)("inlineCode",{parentName:"a"},"TextNode"))," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  }"),(0,r.kt)("p",null,"Finds a TextNode with a size larger than targetCharacters and returns\nthe node along with the remaining length of the text."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"root")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RootNode"},(0,r.kt)("inlineCode",{parentName:"a"},"RootNode"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The RootNode.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"targetCharacters")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The number of characters whose TextNode must be larger than.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"null")," ","|"," { ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),": ",(0,r.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,r.kt)("inlineCode",{parentName:"a"},"TextNode"))," ; ",(0,r.kt)("inlineCode",{parentName:"p"},"offset"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"  }"),(0,r.kt)("p",null,"The TextNode and the intersections offset, or null if no TextNode is found."),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L34"},"lexical-text/src/index.ts:34")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isroottextcontentempty"},"$isRootTextContentEmpty"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$isRootTextContentEmpty"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"isEditorComposing"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"trim?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Determines if the root has any text content and can trim any whitespace if it does."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isEditorComposing")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Is the editor in composition mode due to an active Input Method Editor?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"trim")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Should the root text have its whitespaced trimmed? Defaults to true.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"true if text content is empty, false if there is text or isEditorComposing is true."),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L85"},"lexical-text/src/index.ts:85")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isroottextcontentemptycurry"},"$isRootTextContentEmptyCurry"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$isRootTextContentEmptyCurry"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"isEditorComposing"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"trim?"),"): () => ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Returns a function that executes ",(0,r.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_text#$isroottextcontentempty"},"$isRootTextContentEmpty")),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isEditorComposing")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Is the editor in composition mode due to an active Input Method Editor?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"trim?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Should the root text have its whitespaced trimmed? Defaults to true.")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fn")),(0,r.kt)("p",null,"A function that executes $isRootTextContentEmpty based on arguments."),(0,r.kt)("p",null,"\u25b8 (): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L108"},"lexical-text/src/index.ts:108")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"roottextcontent"},"$rootTextContent"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"$rootTextContent"),"(): ",(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("p",null,"Returns the root's text content."),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"string")),(0,r.kt)("p",null,"The root's text content."),(0,r.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L119"},"lexical-text/src/index.ts:119")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"registerlexicaltextentity"},"registerLexicalTextEntity"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"registerLexicalTextEntity"),"<",(0,r.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,r.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getMatch"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"targetNode"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"createNode"),"): () => ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"[]"),(0,r.kt)("p",null,"Returns a touple that can be rested (...) into mergeRegister to clean up\nnode transforms listeners that transforms text into another node, eg. a HashtagNode."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"  useEffect(() => {\n   return mergeRegister(\n     ...registerLexicalTextEntity(editor, getMatch, targetNode, createNode),\n   );\n }, [createNode, editor, getMatch, targetNode]);\n")),(0,r.kt)("p",null,"Where targetNode is the type of node containing the text you want to transform (like a text input),\nthen getMatch uses a regex to find a matching text and creates the proper node to include the matching text."),(0,r.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,r.kt)("inlineCode",{parentName:"a"},"TextNode")))))),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"editor")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,r.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"The lexical editor.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"getMatch")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"text"),": ",(0,r.kt)("inlineCode",{parentName:"td"},"string"),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical_text#entitymatch"},(0,r.kt)("inlineCode",{parentName:"a"},"EntityMatch"))),(0,r.kt)("td",{parentName:"tr",align:"left"},"Finds a matching string that satisfies a regex expression.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"targetNode")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#klass"},(0,r.kt)("inlineCode",{parentName:"a"},"Klass")),"<",(0,r.kt)("inlineCode",{parentName:"td"},"T"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The node type that contains text to match with. eg. HashtagNode")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"createNode")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(",(0,r.kt)("inlineCode",{parentName:"td"},"textNode"),": ",(0,r.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,r.kt)("inlineCode",{parentName:"a"},"TextNode")),") => ",(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A function that creates a new node to contain the matched text. eg createHashtagNode")))),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,"() => ",(0,r.kt)("inlineCode",{parentName:"p"},"void"),"[]"),(0,r.kt)("p",null,"An array containing the plain text and reverse node transform listeners."),(0,r.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-text/src/index.ts#L208"},"lexical-text/src/index.ts:208")))}m.isMDXComponent=!0}}]);
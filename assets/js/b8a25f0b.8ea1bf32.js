"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[877],{876:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(2784);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(a),k=l,N=m["".concat(o,".").concat(k)]||m[k]||c[k]||r;return a?n.createElement(N,i(i({ref:t},s),{},{components:a})):n.createElement(N,i({ref:t},s))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:l,i[1]=d;for(var p=2;p<r;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7542:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var n=a(7896),l=(a(2784),a(876));const r={id:"lexical_selection",title:"Module: @lexical/selection",sidebar_label:"@lexical/selection",sidebar_position:0,custom_edit_url:null},i=void 0,d={unversionedId:"api/modules/lexical_selection",id:"api/modules/lexical_selection",title:"Module: @lexical/selection",description:"Functions",source:"@site/docs/api/modules/lexical_selection.md",sourceDirName:"api/modules",slug:"/api/modules/lexical_selection",permalink:"/lexical/docs/api/modules/lexical_selection",draft:!1,editUrl:null,tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"lexical_selection",title:"Module: @lexical/selection",sidebar_label:"@lexical/selection",sidebar_position:0,custom_edit_url:null},sidebar:"api",previous:{title:"@lexical/overflow",permalink:"/lexical/docs/api/modules/lexical_overflow"},next:{title:"@lexical/table",permalink:"/lexical/docs/api/modules/lexical_table"}},o={},p=[{value:"Functions",id:"functions",level:2},{value:"$addNodeStyle",id:"addnodestyle",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"$cloneWithProperties",id:"clonewithproperties",level:3},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"$getSelectionStyleValueForProperty",id:"getselectionstylevalueforproperty",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"$isAtNodeEnd",id:"isatnodeend",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"$isParentElementRTL",id:"isparentelementrtl",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"$moveCaretSelection",id:"movecaretselection",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"$moveCharacter",id:"movecharacter",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"$patchStyleText",id:"patchstyletext",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"$selectAll",id:"selectall",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"$setBlocksType",id:"setblockstype",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"$shouldOverrideDefaultCharacterSelection",id:"shouldoverridedefaultcharacterselection",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-10",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"$sliceSelectedTextNodeContent",id:"sliceselectedtextnodecontent",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"$wrapNodes",id:"wrapnodes",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"createDOMRange",id:"createdomrange",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"createRectsFromDOMRange",id:"createrectsfromdomrange",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"getStyleObjectFromCSS",id:"getstyleobjectfromcss",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"trimTextContentFromAnchor",id:"trimtextcontentfromanchor",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-16",level:4}],s={toc:p};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"addnodestyle"},"$addNodeStyle"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$addNodeStyle"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Gets the TextNode's style object and adds the styles to the CSS."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The TextNode to add styles to.")))),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L278"},"lexical-selection/src/lexical-node.ts:278")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clonewithproperties"},"$cloneWithProperties"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$cloneWithProperties"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"T"),">","(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"Returns a copy of a node, but generates a new key for the copy."),(0,l.kt)("h4",{id:"type-parameters"},"Type parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"extends ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode")))))),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The node to be cloned.")))),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"T")),(0,l.kt)("p",null,"The clone of the node."),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L66"},"lexical-selection/src/lexical-node.ts:66")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getselectionstylevalueforproperty"},"$getSelectionStyleValueForProperty"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$getSelectionStyleValueForProperty"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"styleProperty"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"defaultValue?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Returns the current value of a CSS property for TextNodes in the Selection, if set. If not set, it returns the defaultValue.\nIf all TextNodes do not have the same value, it returns an empty string."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection of TextNodes whose value to find.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"styleProperty")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The CSS style property.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"defaultValue")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"''")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The default value for the property, defaults to an empty string.")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"The value of the property for the selected TextNodes."),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L528"},"lexical-selection/src/range-selection.ts:528")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isatnodeend"},"$isAtNodeEnd"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$isAtNodeEnd"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"point"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Determines if the current selection is at the end of the node."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"point")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.Point"},(0,l.kt)("inlineCode",{parentName:"a"},"Point"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The point of the selection to test.")))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the provided point offset is in the last possible position, false otherwise."),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L142"},"lexical-selection/src/lexical-node.ts:142")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isparentelementrtl"},"$isParentElementRTL"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$isParentElementRTL"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Tests a parent element for right to left direction."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection whose parent is to be tested.")))),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the selections' parent element has a direction of 'rtl' (right to left), false otherwise."),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L434"},"lexical-selection/src/range-selection.ts:434")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"movecaretselection"},"$moveCaretSelection"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$moveCaretSelection"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isHoldingShift"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isBackward"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"granularity"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Moves the selection according to the arguments."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selected text or nodes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"isHoldingShift")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Is the shift key being held down during the operation.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"isBackward")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Is the selection selected backwards (the focus comes before the anchor)?")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"granularity")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},'"character"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},'"word"')," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},'"lineboundary"')),(0,l.kt)("td",{parentName:"tr",align:"left"},"The distance to adjust the current selection.")))),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L420"},"lexical-selection/src/range-selection.ts:420")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"movecharacter"},"$moveCharacter"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$moveCharacter"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isHoldingShift"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isBackward"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Moves selection by character according to arguments."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection of the characters to move.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"isHoldingShift")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Is the shift key being held down during the operation.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"isBackward")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Is the selection backward (the focus comes before the anchor)?")))),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L449"},"lexical-selection/src/range-selection.ts:449")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"patchstyletext"},"$patchStyleText"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$patchStyleText"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"patch"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Applies the provided styles to the TextNodes in the provided Selection.\nWill update partially selected TextNodes by splitting the TextNode and applying\nthe styles to the appropriate one."),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selected node(s) to update.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"patch")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"string"),">"),(0,l.kt)("td",{parentName:"tr",align:"left"},"The patch to apply, which can include multiple styles. { CSSProperty: value }")))),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L314"},"lexical-selection/src/lexical-node.ts:314")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"selectall"},"$selectAll"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$selectAll"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Expands the current Selection to cover all of the content in the editor."),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The current selection.")))),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L467"},"lexical-selection/src/range-selection.ts:467")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setblockstype"},"$setBlocksType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$setBlocksType"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"createElement"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Converts all nodes in the selection that are of one block type to another."),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.GridSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"GridSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selected blocks to be converted.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"createElement")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The function that creates the node. eg. $createParagraphNode.")))),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L42"},"lexical-selection/src/range-selection.ts:42")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"shouldoverridedefaultcharacterselection"},"$shouldOverrideDefaultCharacterSelection"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$shouldOverrideDefaultCharacterSelection"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isBackward"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Determines if the default character selection should be overridden. Used with DecoratorNodes"),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection whose default character selection may need to be overridden.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"isBackward")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"Is the selection backwards (the focus comes before the anchor)?")))),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if it should be overridden, false if not."),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L399"},"lexical-selection/src/range-selection.ts:399")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sliceselectedtextnodecontent"},"$sliceSelectedTextNodeContent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$sliceSelectedTextNodeContent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"textNode"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",null,'Generally used to append text content to HTML and JSON. Grabs the text content and "slices"\nit to be generated into the new TextNode.'),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.NodeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"NodeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.GridSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"GridSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection containing the node whose TextNode is to be edited.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"textNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The TextNode to be edited.")))),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",null,"The updated TextNode."),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L93"},"lexical-selection/src/lexical-node.ts:93")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wrapnodes"},"$wrapNodes"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"$wrapNodes"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"selection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"createElement"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappingElement?"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"Deprecated"))),(0,l.kt)("p",null,"Wraps all nodes in the selection into another node of the type returned by createElement."),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"selection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.GridSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"GridSelection"))),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The selection of nodes to be wrapped.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"createElement")),(0,l.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"undefined")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A function that creates the wrapping ElementNode. eg. $createParagraphNode.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"wrappingElement")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.ElementNode"},(0,l.kt)("inlineCode",{parentName:"a"},"ElementNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:"left"},"An element to append the wrapped selection and its children to.")))),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/range-selection.ts#L130"},"lexical-selection/src/range-selection.ts:130")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"createdomrange"},"createDOMRange"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"createDOMRange"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"anchorNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_anchorOffset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"focusNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_focusOffset"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Range")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"null")),(0,l.kt)("p",null,"Creates a selection range for the DOM."),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The lexical editor.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"anchorNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The anchor node of a selection.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_anchorOffset")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of space offset from the anchor to the focus.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"focusNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The current focus.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_focusOffset")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of space offset from the focus to the anchor.")))),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Range")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"p"},"null")),(0,l.kt)("p",null,"The range of selection for the DOM that was created."),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/utils.ts#L47"},"lexical-selection/src/utils.ts:47")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"createrectsfromdomrange"},"createRectsFromDOMRange"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"createRectsFromDOMRange"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"range"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"ClientRect"),"[]"),(0,l.kt)("p",null,"Creates DOMRects, generally used to help the editor find a specific location on the screen."),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The lexical editor")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"range")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"Range")),(0,l.kt)("td",{parentName:"tr",align:"left"},"A fragment of a document that can contain nodes and parts of text nodes.")))),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ClientRect"),"[]"),(0,l.kt)("p",null,"The selectionRects as an array."),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/utils.ts#L124"},"lexical-selection/src/utils.ts:124")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getstyleobjectfromcss"},"getStyleObjectFromCSS"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getStyleObjectFromCSS"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"css"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),">"),(0,l.kt)("p",null,"Given a CSS string, returns an object from the style cache."),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"css")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The CSS property as a string.")))),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Record"),"<",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),">"),(0,l.kt)("p",null,"The value of the given CSS property."),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/utils.ts#L196"},"lexical-selection/src/utils.ts:196")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"trimtextcontentfromanchor"},"trimTextContentFromAnchor"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"trimTextContentFromAnchor"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"anchor"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"delCount"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("p",null,"Trims text from a node in order to shorten it, eg. to enforce a text's max length. If it deletes text\nthat is an ancestor of the anchor then it will leave 2 indents, otherwise, if no text content exists, it deletes\nthe TextNode. It will move the focus to either the end of any left over text or beginning of a new TextNode."),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The lexical editor.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"anchor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.Point"},(0,l.kt)("inlineCode",{parentName:"a"},"Point"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"The anchor of the current selection, where the selection should be pointing.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"delCount")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"The amount of characters to delete. Useful as a dynamic variable eg. textContentSize - maxLength;")))),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical-selection/src/lexical-node.ts#L158"},"lexical-selection/src/lexical-node.ts:158")))}c.isMDXComponent=!0}}]);
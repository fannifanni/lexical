"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[4770],{876:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(2784);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=s(a),u=l,m=k["".concat(d,".").concat(u)]||k[u]||c[u]||i;return a?n.createElement(m,r(r({ref:t},p),{},{components:a})):n.createElement(m,r({ref:t},p))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},740:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7896),l=(a(2784),a(876));const i={id:"lexical.LineBreakNode",title:"Class: LineBreakNode",sidebar_label:"LineBreakNode",custom_edit_url:null},r=void 0,o={unversionedId:"api/classes/lexical.LineBreakNode",id:"api/classes/lexical.LineBreakNode",title:"Class: LineBreakNode",description:"lexical.LineBreakNode",source:"@site/docs/api/classes/lexical.LineBreakNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.LineBreakNode",permalink:"/lexical/docs/api/classes/lexical.LineBreakNode",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.LineBreakNode",title:"Class: LineBreakNode",sidebar_label:"LineBreakNode",custom_edit_url:null},sidebar:"api",previous:{title:"LexicalNode",permalink:"/lexical/docs/api/classes/lexical.LexicalNode"},next:{title:"NodeSelection",permalink:"/lexical/docs/api/classes/lexical.NodeSelection"}},d={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Methods",id:"methods",level:2},{value:"createDOM",id:"createdom",level:3},{value:"Returns",id:"returns",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-8",level:4}],p={toc:s};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical"},"lexical"),".LineBreakNode"),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"LineBreakNode"))))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"new LineBreakNode"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"key?"),")"),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"key?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"overrides"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#constructor"},"constructor")),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L32"},"lexical/src/nodes/LexicalLineBreakNode.ts:32")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"createdom"},"createDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"createDOM"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")),(0,l.kt)("p",null,"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."),(0,l.kt)("p",null,"This method must return exactly one HTMLElement. Nested elements are not supported."),(0,l.kt)("p",null,"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")),(0,l.kt)("h4",{id:"overrides-1"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#createdom"},"createDOM")),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L40"},"lexical/src/nodes/LexicalLineBreakNode.ts:40")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"exportjson"},"exportJSON"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"exportJSON"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedlexicalnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedLexicalNode"))),(0,l.kt)("p",null,"Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedlexicalnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedLexicalNode"))),(0,l.kt)("h4",{id:"overrides-2"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#exportjson"},"exportJSON")),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L86"},"lexical/src/nodes/LexicalLineBreakNode.ts:86")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gettextcontent"},"getTextContent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getTextContent"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},'"\\n"')),(0,l.kt)("p",null,"Returns the text content of the node. Override this for\ncustom nodes that should have a representation in plain text\nformat (for copy + paste, for example)"),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'"\\n"')),(0,l.kt)("h4",{id:"overrides-3"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#gettextcontent"},"getTextContent")),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L36"},"lexical/src/nodes/LexicalLineBreakNode.ts:36")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updatedom"},"updateDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"updateDOM"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"false")),(0,l.kt)("p",null,"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."),(0,l.kt)("p",null,'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"false")),(0,l.kt)("h4",{id:"overrides-4"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#updatedom"},"updateDOM")),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L44"},"lexical/src/nodes/LexicalLineBreakNode.ts:44")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clone"},"clone"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"clone"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LineBreakNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LineBreakNode"))),(0,l.kt)("p",null,"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LineBreakNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LineBreakNode")))))),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LineBreakNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LineBreakNode"))),(0,l.kt)("h4",{id:"overrides-5"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#clone"},"clone")),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L28"},"lexical/src/nodes/LexicalLineBreakNode.ts:28")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gettype"},"getType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"getType"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("h4",{id:"overrides-6"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#gettype-1"},"getType")),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L24"},"lexical/src/nodes/LexicalLineBreakNode.ts:24")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"importdom"},"importDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"importDOM"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L48"},"lexical/src/nodes/LexicalLineBreakNode.ts:48")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"importjson"},"importJSON"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"importJSON"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"serializedLineBreakNode"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LineBreakNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LineBreakNode"))),(0,l.kt)("p",null,"Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"serializedLineBreakNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#serializedlexicalnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedLexicalNode")))))),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LineBreakNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LineBreakNode"))),(0,l.kt)("h4",{id:"overrides-7"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#importjson"},"importJSON")),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalLineBreakNode.ts#L80"},"lexical/src/nodes/LexicalLineBreakNode.ts:80")))}c.isMDXComponent=!0}}]);
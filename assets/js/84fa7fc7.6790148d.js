"use strict";(self.webpackChunk_lexical_website=self.webpackChunk_lexical_website||[]).push([[5737],{876:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(2784);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),k=s(a),m=l,u=k["".concat(o,".").concat(m)]||k[m]||c[m]||i;return a?n.createElement(u,r(r({ref:t},p),{},{components:a})):n.createElement(u,r({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=k;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:l,r[1]=d;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},256:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var n=a(7896),l=(a(2784),a(876));const i={id:"lexical.TextNode",title:"Class: TextNode",sidebar_label:"TextNode",custom_edit_url:null},r=void 0,d={unversionedId:"api/classes/lexical.TextNode",id:"api/classes/lexical.TextNode",title:"Class: TextNode",description:"lexical.TextNode",source:"@site/docs/api/classes/lexical.TextNode.md",sourceDirName:"api/classes",slug:"/api/classes/lexical.TextNode",permalink:"/lexical/docs/api/classes/lexical.TextNode",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"lexical.TextNode",title:"Class: TextNode",sidebar_label:"TextNode",custom_edit_url:null},sidebar:"api",previous:{title:"TabNode",permalink:"/lexical/docs/api/classes/lexical.TabNode"},next:{title:"CodeHighlightNode",permalink:"/lexical/docs/api/classes/lexical_code.CodeHighlightNode"}},o={},s=[{value:"Hierarchy",id:"hierarchy",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Properties",id:"properties",level:2},{value:"__text",id:"__text",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"canInsertTextAfter",id:"caninserttextafter",level:3},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"canInsertTextBefore",id:"caninserttextbefore",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"createDOM",id:"createdom",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"exportDOM",id:"exportdom",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"exportJSON",id:"exportjson",level:3},{value:"Returns",id:"returns-4",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"Defined in",id:"defined-in-6",level:4},{value:"getDetail",id:"getdetail",level:3},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-7",level:4},{value:"getFormat",id:"getformat",level:3},{value:"Returns",id:"returns-6",level:4},{value:"Defined in",id:"defined-in-8",level:4},{value:"getFormatFlags",id:"getformatflags",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-7",level:4},{value:"Defined in",id:"defined-in-9",level:4},{value:"getMode",id:"getmode",level:3},{value:"Returns",id:"returns-8",level:4},{value:"Defined in",id:"defined-in-10",level:4},{value:"getStyle",id:"getstyle",level:3},{value:"Returns",id:"returns-9",level:4},{value:"Defined in",id:"defined-in-11",level:4},{value:"getTextContent",id:"gettextcontent",level:3},{value:"Returns",id:"returns-10",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Defined in",id:"defined-in-12",level:4},{value:"hasFormat",id:"hasformat",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-11",level:4},{value:"Defined in",id:"defined-in-13",level:4},{value:"isComposing",id:"iscomposing",level:3},{value:"Returns",id:"returns-12",level:4},{value:"Defined in",id:"defined-in-14",level:4},{value:"isDirectionless",id:"isdirectionless",level:3},{value:"Returns",id:"returns-13",level:4},{value:"Defined in",id:"defined-in-15",level:4},{value:"isSegmented",id:"issegmented",level:3},{value:"Returns",id:"returns-14",level:4},{value:"Defined in",id:"defined-in-16",level:4},{value:"isSimpleText",id:"issimpletext",level:3},{value:"Returns",id:"returns-15",level:4},{value:"Defined in",id:"defined-in-17",level:4},{value:"isTextEntity",id:"istextentity",level:3},{value:"Returns",id:"returns-16",level:4},{value:"Defined in",id:"defined-in-18",level:4},{value:"isToken",id:"istoken",level:3},{value:"Returns",id:"returns-17",level:4},{value:"Defined in",id:"defined-in-19",level:4},{value:"isUnmergeable",id:"isunmergeable",level:3},{value:"Returns",id:"returns-18",level:4},{value:"Defined in",id:"defined-in-20",level:4},{value:"mergeWithSibling",id:"mergewithsibling",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-19",level:4},{value:"Defined in",id:"defined-in-21",level:4},{value:"select",id:"select",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-20",level:4},{value:"Defined in",id:"defined-in-22",level:4},{value:"selectionTransform",id:"selectiontransform",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-21",level:4},{value:"Defined in",id:"defined-in-23",level:4},{value:"setDetail",id:"setdetail",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-22",level:4},{value:"Defined in",id:"defined-in-24",level:4},{value:"setFormat",id:"setformat",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-23",level:4},{value:"Defined in",id:"defined-in-25",level:4},{value:"setMode",id:"setmode",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-24",level:4},{value:"Defined in",id:"defined-in-26",level:4},{value:"setStyle",id:"setstyle",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-25",level:4},{value:"Defined in",id:"defined-in-27",level:4},{value:"setTextContent",id:"settextcontent",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Returns",id:"returns-26",level:4},{value:"Defined in",id:"defined-in-28",level:4},{value:"spliceText",id:"splicetext",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Returns",id:"returns-27",level:4},{value:"Defined in",id:"defined-in-29",level:4},{value:"splitText",id:"splittext",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-28",level:4},{value:"Defined in",id:"defined-in-30",level:4},{value:"toggleDirectionless",id:"toggledirectionless",level:3},{value:"Returns",id:"returns-29",level:4},{value:"Defined in",id:"defined-in-31",level:4},{value:"toggleFormat",id:"toggleformat",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Returns",id:"returns-30",level:4},{value:"Defined in",id:"defined-in-32",level:4},{value:"toggleUnmergeable",id:"toggleunmergeable",level:3},{value:"Returns",id:"returns-31",level:4},{value:"Defined in",id:"defined-in-33",level:4},{value:"updateDOM",id:"updatedom",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Returns",id:"returns-32",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"Defined in",id:"defined-in-34",level:4},{value:"clone",id:"clone",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Returns",id:"returns-33",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"Defined in",id:"defined-in-35",level:4},{value:"getType",id:"gettype",level:3},{value:"Returns",id:"returns-34",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"Defined in",id:"defined-in-36",level:4},{value:"importDOM",id:"importdom",level:3},{value:"Returns",id:"returns-35",level:4},{value:"Defined in",id:"defined-in-37",level:4},{value:"importJSON",id:"importjson",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Returns",id:"returns-36",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"Defined in",id:"defined-in-38",level:4}],p={toc:s};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical"},"lexical"),".TextNode"),(0,l.kt)("h2",{id:"hierarchy"},"Hierarchy"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalNode"))),(0,l.kt)("p",{parentName:"li"},"\u21b3 ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"TextNode"))),(0,l.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TabNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TabNode"))),(0,l.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical_code.CodeHighlightNode"},(0,l.kt)("inlineCode",{parentName:"a"},"CodeHighlightNode"))),(0,l.kt)("p",{parentName:"li"},"\u21b3\u21b3 ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical_hashtag.HashtagNode"},(0,l.kt)("inlineCode",{parentName:"a"},"HashtagNode"))))),(0,l.kt)("h2",{id:"constructors"},"Constructors"),(0,l.kt)("h3",{id:"constructor"},"constructor"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"new TextNode"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"key?"),")"),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"key?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string"))))),(0,l.kt)("h4",{id:"overrides"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#constructor"},"constructor")),(0,l.kt)("h4",{id:"defined-in"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L295"},"lexical/src/nodes/LexicalTextNode.ts:295")),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"__text"},"_","_","text"),(0,l.kt)("p",null,"\u2022 ",(0,l.kt)("strong",{parentName:"p"},"_","_","text"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L277"},"lexical/src/nodes/LexicalTextNode.ts:277")),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"caninserttextafter"},"canInsertTextAfter"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"canInsertTextAfter"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\nwhen a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\nto insert text into this node. If false, it will insert the text in a new sibling node."),(0,l.kt)("h4",{id:"returns"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if text can be inserted after the node, false otherwise."),(0,l.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L864"},"lexical/src/nodes/LexicalTextNode.ts:864")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"caninserttextbefore"},"canInsertTextBefore"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"canInsertTextBefore"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\nwhen a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\nto insert text into this node. If false, it will insert the text in a new sibling node."),(0,l.kt)("h4",{id:"returns-1"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if text can be inserted before the node, false otherwise."),(0,l.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L853"},"lexical/src/nodes/LexicalTextNode.ts:853")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"createdom"},"createDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"createDOM"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"config"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")),(0,l.kt)("p",null,"Called during the reconciliation process to determine which nodes\nto insert into the DOM for this Lexical Node."),(0,l.kt)("p",null,"This method must return exactly one HTMLElement. Nested elements are not supported."),(0,l.kt)("p",null,"Do not attempt to update the Lexical EditorState during this phase of the update lifecyle."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#editorconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"EditorConfig"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"allows access to things like the EditorTheme (to apply classes) during reconciliation.")))),(0,l.kt)("h4",{id:"returns-2"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")),(0,l.kt)("h4",{id:"overrides-1"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#createdom"},"createDOM")),(0,l.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L443"},"lexical/src/nodes/LexicalTextNode.ts:443")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"exportdom"},"exportDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"exportDOM"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"editor"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domexportoutput"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMExportOutput"))),(0,l.kt)("p",null,"Controls how the this node is serialized to HTML. This is important for\ncopy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\nin which case the primary transfer format is HTML. It's also important if you're serializing\nto HTML for any other reason via ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical_html#$generatehtmlfromnodes"},"$generateHtmlFromNodes"),". You could\nalso use this method to build your own HTML renderer."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"editor")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.LexicalEditor"},(0,l.kt)("inlineCode",{parentName:"a"},"LexicalEditor")))))),(0,l.kt)("h4",{id:"returns-3"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domexportoutput"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMExportOutput"))),(0,l.kt)("h4",{id:"overrides-2"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#exportdom"},"exportDOM")),(0,l.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L591"},"lexical/src/nodes/LexicalTextNode.ts:591")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"exportjson"},"exportJSON"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"exportJSON"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedTextNode"))),(0,l.kt)("p",null,"Controls how the this node is serialized to JSON. This is important for\ncopy and paste between Lexical editors sharing the same namespace. It's also important\nif you're serializing to JSON for persistent storage somewhere.\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,l.kt)("h4",{id:"returns-4"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedTextNode"))),(0,l.kt)("h4",{id:"overrides-3"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#exportjson"},"exportJSON")),(0,l.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L617"},"lexical/src/nodes/LexicalTextNode.ts:617")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getdetail"},"getDetail"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getDetail"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\nTextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\nor TextNode.isUnmergeable instead."),(0,l.kt)("h4",{id:"returns-5"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"a number representing the detail of the text node."),(0,l.kt)("h4",{id:"defined-in-7"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L322"},"lexical/src/nodes/LexicalTextNode.ts:322")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getformat"},"getFormat"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getFormat"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\nTextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead."),(0,l.kt)("h4",{id:"returns-6"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"a number representing the format of the text node."),(0,l.kt)("h4",{id:"defined-in-8"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L310"},"lexical/src/nodes/LexicalTextNode.ts:310")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getformatflags"},"getFormatFlags"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getFormatFlags"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"alignWithFormat"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"Returns the format flags applied to the node as a 32-bit integer."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textformattype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextFormatType")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"alignWithFormat")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"number"))))),(0,l.kt)("h4",{id:"returns-7"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"number")),(0,l.kt)("p",null,"a number representing the TextFormatTypes applied to the node."),(0,l.kt)("h4",{id:"defined-in-9"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L435"},"lexical/src/nodes/LexicalTextNode.ts:435")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getmode"},"getMode"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getMode"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#textmodetype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextModeType"))),(0,l.kt)("p",null,'Returns the mode (TextModeType) of the TextNode, which may be "normal", "token", or "segmented"'),(0,l.kt)("h4",{id:"returns-8"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#textmodetype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextModeType"))),(0,l.kt)("p",null,"TextModeType."),(0,l.kt)("h4",{id:"defined-in-10"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L332"},"lexical/src/nodes/LexicalTextNode.ts:332")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getstyle"},"getStyle"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getStyle"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Returns the styles currently applied to the node. This is analogous to CSSText in the DOM."),(0,l.kt)("h4",{id:"returns-9"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"CSSText-like string of styles applied to the underlying DOM node."),(0,l.kt)("h4",{id:"defined-in-11"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L342"},"lexical/src/nodes/LexicalTextNode.ts:342")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gettextcontent"},"getTextContent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"getTextContent"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Returns the text content of the node as a string."),(0,l.kt)("h4",{id:"returns-10"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"a string representing the text content of the node."),(0,l.kt)("h4",{id:"overrides-4"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#gettextcontent"},"getTextContent")),(0,l.kt)("h4",{id:"defined-in-12"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L425"},"lexical/src/nodes/LexicalTextNode.ts:425")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hasformat"},"hasFormat"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"hasFormat"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\nstring values to get the format of a TextNode."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textformattype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextFormatType"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"the TextFormatType to check for.")))),(0,l.kt)("h4",{id:"returns-11"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node has the provided format, false otherwise."),(0,l.kt)("h4",{id:"defined-in-13"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L405"},"lexical/src/nodes/LexicalTextNode.ts:405")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"iscomposing"},"isComposing"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isComposing"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("h4",{id:"returns-12"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if Lexical detects that an IME or other 3rd-party script is attempting to\nmutate the TextNode, false otherwise."),(0,l.kt)("h4",{id:"defined-in-14"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L363"},"lexical/src/nodes/LexicalTextNode.ts:363")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isdirectionless"},"isDirectionless"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isDirectionless"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,'Returns whether or not the node is "directionless". Directionless nodes don\'t respect changes between RTL and LTR modes.'),(0,l.kt)("h4",{id:"returns-13"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node is directionless, false otherwise."),(0,l.kt)("h4",{id:"defined-in-15"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L382"},"lexical/src/nodes/LexicalTextNode.ts:382")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"issegmented"},"isSegmented"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isSegmented"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,'Returns whether or not the node is in "segemented" mode. TextNodes in segemented mode can be navigated through character-by-character\nwith a RangeSelection, but are deleted in space-delimited "segments".'),(0,l.kt)("h4",{id:"returns-14"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node is in segmented mode, false otherwise."),(0,l.kt)("h4",{id:"defined-in-16"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L373"},"lexical/src/nodes/LexicalTextNode.ts:373")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"issimpletext"},"isSimpleText"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isSimpleText"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,'Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type "text"\n(i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).'),(0,l.kt)("h4",{id:"returns-15"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node is simple text, false otherwise."),(0,l.kt)("h4",{id:"defined-in-17"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L416"},"lexical/src/nodes/LexicalTextNode.ts:416")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"istextentity"},"isTextEntity"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isTextEntity"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\nwhen used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\nnode class that you create and replace matched text with should return true from this method."),(0,l.kt)("h4",{id:"returns-16"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,'true if the node is to be treated as a "text entity", false otherwise.'),(0,l.kt)("h4",{id:"defined-in-18"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L1059"},"lexical/src/nodes/LexicalTextNode.ts:1059")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"istoken"},"isToken"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isToken"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,'Returns whether or not the node is in "token" mode. TextNodes in token mode can be navigated through character-by-character\nwith a RangeSelection, but are deleted as a single entity (not invdividually by character).'),(0,l.kt)("h4",{id:"returns-17"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node is in token mode, false otherwise."),(0,l.kt)("h4",{id:"defined-in-19"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L353"},"lexical/src/nodes/LexicalTextNode.ts:353")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"isunmergeable"},"isUnmergeable"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"isUnmergeable"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\nadjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen."),(0,l.kt)("h4",{id:"returns-18"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"true if the node is unmergeable, false otherwise."),(0,l.kt)("h4",{id:"defined-in-20"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L392"},"lexical/src/nodes/LexicalTextNode.ts:392")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"mergewithsibling"},"mergeWithSibling"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"mergeWithSibling"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"target"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Merges the target TextNode into this TextNode, removing the target node."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"target")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"the TextNode to merge into this one.")))),(0,l.kt)("h4",{id:"returns-19"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-21"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L1002"},"lexical/src/nodes/LexicalTextNode.ts:1002")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"select"},"select"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"select"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"_anchorOffset?"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_focusOffset?"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("p",null,"Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_anchorOffset?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the offset at which the Selection anchor will be placed.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"_focusOffset?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the offset at which the Selection focus will be placed.")))),(0,l.kt)("h4",{id:"returns-20"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))),(0,l.kt)("p",null,"the new RangeSelection."),(0,l.kt)("h4",{id:"defined-in-22"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L760"},"lexical/src/nodes/LexicalTextNode.ts:760")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"selectiontransform"},"selectionTransform"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"selectionTransform"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"prevSelection"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"nextSelection"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"prevSelection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.NodeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"NodeSelection"))," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.GridSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"GridSelection")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"nextSelection")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.RangeSelection"},(0,l.kt)("inlineCode",{parentName:"a"},"RangeSelection")))))),(0,l.kt)("h4",{id:"returns-21"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"void")),(0,l.kt)("h4",{id:"defined-in-23"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L630"},"lexical/src/nodes/LexicalTextNode.ts:630")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setdetail"},"setDetail"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setDetail"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"detail"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\nversion of the argument can only specify one detail value and doing so will remove all other detail values that\nmay be applied to the node. For toggling behavior, consider using ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#toggledirectionless"},"toggleDirectionless"),"\nor TextNode.togglerUnmergeable"),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"detail")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,l.kt)("inlineCode",{parentName:"td"},"TextDetailType")),(0,l.kt)("td",{parentName:"tr",align:"left"},"TextDetailType or 32-bit integer representing the node detail.")))),(0,l.kt)("h4",{id:"returns-22"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode.\n// TODO 0.12 This should just be a ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("h4",{id:"defined-in-24"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L665"},"lexical/src/nodes/LexicalTextNode.ts:665")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setformat"},"setFormat"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setFormat"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"format"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\nversion of the argument can only specify one format and doing so will remove all other formats that\nmay be applied to the node. For toggling behavior, consider using ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode#toggleformat"},"toggleFormat")),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"format")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")," ","|"," ",(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textformattype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextFormatType"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"TextFormatType or 32-bit integer representing the node format.")))),(0,l.kt)("h4",{id:"returns-23"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode.\n// TODO 0.12 This should just be a ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)("h4",{id:"defined-in-25"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L647"},"lexical/src/nodes/LexicalTextNode.ts:647")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setmode"},"setMode"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setMode"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Sets the mode of the node."),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textmodetype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextModeType")))))),(0,l.kt)("h4",{id:"returns-24"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-26"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L726"},"lexical/src/nodes/LexicalTextNode.ts:726")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"setstyle"},"setStyle"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setStyle"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"style"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Sets the node style to the provided CSSText-like string. Set this property as you\nwould an HTMLElement style attribute to apply inline styles to the underlying DOM Element."),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"style")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"CSSText to be applied to the underlying HTMLElement.")))),(0,l.kt)("h4",{id:"returns-25"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-27"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L680"},"lexical/src/nodes/LexicalTextNode.ts:680")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"settextcontent"},"setTextContent"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"setTextContent"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"text"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Sets the text content of the node."),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"text")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the string to set as the text value of the node.")))),(0,l.kt)("h4",{id:"returns-26"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-28"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L743"},"lexical/src/nodes/LexicalTextNode.ts:743")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"splicetext"},"spliceText"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"spliceText"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"offset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"delCount"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"newText"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"moveSelection?"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\nspecified. Can optionally calculate a new selection after the operation is complete."),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"offset")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the offset at which the splice operation should begin.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"delCount")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the number of characters to delete, starting from the offset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"newText")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"string")),(0,l.kt)("td",{parentName:"tr",align:"left"},"the text to insert into the TextNode at the offset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"moveSelection?")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"boolean")),(0,l.kt)("td",{parentName:"tr",align:"left"},"optional, whether or not to move selection to the end of the inserted substring.")))),(0,l.kt)("h4",{id:"returns-27"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-29"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L812"},"lexical/src/nodes/LexicalTextNode.ts:812")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"splittext"},"splitText"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"splitText"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"...splitOffsets"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode")),"[]"),(0,l.kt)("p",null,"Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\nformed by the split, and inserting those new TextNodes into the editor, replacing the one that was split."),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"...splitOffsets")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"number"),"[]"),(0,l.kt)("td",{parentName:"tr",align:"left"},"rest param of the text content character offsets at which this node should be split.")))),(0,l.kt)("h4",{id:"returns-28"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode")),"[]"),(0,l.kt)("p",null,"an Array containing the newly-created TextNodes."),(0,l.kt)("h4",{id:"defined-in-30"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L876"},"lexical/src/nodes/LexicalTextNode.ts:876")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"toggledirectionless"},"toggleDirectionless"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"toggleDirectionless"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Toggles the directionless detail value of the node. Prefer using this method over setDetail."),(0,l.kt)("h4",{id:"returns-29"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-31"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L704"},"lexical/src/nodes/LexicalTextNode.ts:704")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"toggleformat"},"toggleFormat"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"toggleFormat"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"type"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Applies the provided format to this TextNode if it's not present. Removes it if it is present.\nPrefer using this method to turn specific formats on and off."),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#textformattype"},(0,l.kt)("inlineCode",{parentName:"a"},"TextFormatType"))),(0,l.kt)("td",{parentName:"tr",align:"left"},"TextFormatType to toggle.")))),(0,l.kt)("h4",{id:"returns-30"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-32"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L694"},"lexical/src/nodes/LexicalTextNode.ts:694")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"toggleunmergeable"},"toggleUnmergeable"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"toggleUnmergeable"),"(): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Toggles the unmergeable detail value of the node. Prefer using this method over setDetail."),(0,l.kt)("h4",{id:"returns-31"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"this TextNode."),(0,l.kt)("h4",{id:"defined-in-33"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L715"},"lexical/src/nodes/LexicalTextNode.ts:715")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"updatedom"},"updateDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("strong",{parentName:"p"},"updateDOM"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"prevNode"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"dom"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"config"),"): ",(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("p",null,"Called when a node changes and should update the DOM\nin whatever way is necessary to make it align with any changes that might\nhave happened during the update."),(0,l.kt)("p",null,'Returning "true" here will cause lexical to unmount and recreate the DOM node\n(by calling createDOM). You would need to do this if the element tag changes,\nfor instance.'),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"prevNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"dom")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"HTMLElement"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"config")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#editorconfig"},(0,l.kt)("inlineCode",{parentName:"a"},"EditorConfig")))))),(0,l.kt)("h4",{id:"returns-32"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"boolean")),(0,l.kt)("h4",{id:"overrides-5"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#updatedom"},"updateDOM")),(0,l.kt)("h4",{id:"defined-in-34"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L463"},"lexical/src/nodes/LexicalTextNode.ts:463")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"clone"},"clone"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"clone"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"node"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Clones this node, creating a new node with a different key\nand adding it to the EditorState (but not attaching it anywhere!). All nodes must\nimplement this method."),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"node")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode")))))),(0,l.kt)("h4",{id:"returns-33"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("h4",{id:"overrides-6"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#clone"},"clone")),(0,l.kt)("h4",{id:"defined-in-35"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L291"},"lexical/src/nodes/LexicalTextNode.ts:291")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"gettype"},"getType"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"getType"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("p",null,"Returns the string type of this node. Every node must\nimplement this and it MUST BE UNIQUE amongst nodes registered\non the editor."),(0,l.kt)("h4",{id:"returns-34"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("h4",{id:"overrides-7"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#gettype-1"},"getType")),(0,l.kt)("h4",{id:"defined-in-36"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L287"},"lexical/src/nodes/LexicalTextNode.ts:287")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"importdom"},"importDOM"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"importDOM"),"(): ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,l.kt)("h4",{id:"returns-35"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"null")," ","|"," ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/modules/lexical#domconversionmap"},(0,l.kt)("inlineCode",{parentName:"a"},"DOMConversionMap"))),(0,l.kt)("h4",{id:"defined-in-37"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L530"},"lexical/src/nodes/LexicalTextNode.ts:530")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"importjson"},"importJSON"),(0,l.kt)("p",null,"\u25b8 ",(0,l.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,l.kt)("strong",{parentName:"p"},"importJSON"),"(",(0,l.kt)("inlineCode",{parentName:"p"},"serializedNode"),"): ",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("p",null,"Controls how the this node is deserialized from JSON. This is usually boilerplate,\nbut provides an abstraction between the node implementation and serialized interface that can\nbe important if you ever make breaking changes to a node schema (by adding or removing properties).\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://lexical.dev/docs/concepts/serialization#lexical---html"},"Serialization & Deserialization"),"."),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,l.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"serializedNode")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"/lexical/docs/api/modules/lexical#serializedtextnode"},(0,l.kt)("inlineCode",{parentName:"a"},"SerializedTextNode")))))),(0,l.kt)("h4",{id:"returns-36"},"Returns"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.TextNode"},(0,l.kt)("inlineCode",{parentName:"a"},"TextNode"))),(0,l.kt)("h4",{id:"overrides-8"},"Overrides"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode"},"LexicalNode"),".",(0,l.kt)("a",{parentName:"p",href:"/lexical/docs/api/classes/lexical.LexicalNode#importjson"},"importJSON")),(0,l.kt)("h4",{id:"defined-in-38"},"Defined in"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/fannifanni/lexical/blob/61208ee/packages/lexical/src/nodes/LexicalTextNode.ts#L579"},"lexical/src/nodes/LexicalTextNode.ts:579")))}c.isMDXComponent=!0}}]);